>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3
>>> add_integer(13, 0)
13
>>> add_integer(2)
100
>>> add_integer(-2, 3)
1
>>> add_integer(0, -1)
-1
>>> add_integer(2.0, 3.9)
5
>>> add_integer()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 1 required positional argument: 'a'
>>> add_integer(a, b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
>>> add_integer('a', 4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/classic1/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 20, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(5, 'g')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/classic1/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 22, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> add_integer(float('inf'), 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/classic1/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 23, in add_integer
    return (int(a) + int(b))
OverflowError: cannot convert float infinity to integer
>>> add_integer(0, float('nan'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/classic1/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 23, in add_integer
    return (int(a) + int(b))
ValueError: cannot convert float NaN to integer
